{
  "_args": [
    [
      {
        "raw": "is_js@^0.9.0",
        "scope": null,
        "escapedName": "is_js",
        "name": "is_js",
        "rawSpec": "^0.9.0",
        "spec": ">=0.9.0 <0.10.0",
        "type": "range"
      },
      "D:\\www\\1A_TestDemo_code\\node_ws\\node_modules\\request-ip"
    ]
  ],
  "_cnpm_publish_time": 1473800672526,
  "_from": "is_js@^0.9.0",
  "_hasShrinkwrap": false,
  "_id": "is_js@0.9.0",
  "_location": "/is_js",
  "_nodeVersion": "4.4.7",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/is_js-0.9.0.tgz_1473800670642_0.2801450041588396"
  },
  "_npmUser": {
    "name": "jdalton",
    "email": "john.david.dalton@gmail.com"
  },
  "_npmVersion": "2.15.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "is_js@^0.9.0",
    "scope": null,
    "escapedName": "is_js",
    "name": "is_js",
    "rawSpec": "^0.9.0",
    "spec": ">=0.9.0 <0.10.0",
    "type": "range"
  },
  "_requiredBy": [
    "/request-ip"
  ],
  "_resolved": "http://registry.npm.taobao.org/is_js/download/is_js-0.9.0.tgz",
  "_shasum": "0ab94540502ba7afa24c856aa985561669e9c52d",
  "_shrinkwrap": null,
  "_spec": "is_js@^0.9.0",
  "_where": "D:\\www\\1A_TestDemo_code\\node_ws\\node_modules\\request-ip",
  "bugs": {
    "url": "https://github.com/arasatasaygin/is.js/issues"
  },
  "dependencies": {},
  "description": "micro check library",
  "devDependencies": {
    "chai": "^3.4.0",
    "eslint": "^2.13.1",
    "lodash": "^4.15.0",
    "mocha": "^2.2.1",
    "mocha-phantomjs": "^4.1.0",
    "pre-commit": "^1.1.3",
    "uglify-js": "^2.7.3"
  },
  "directories": {},
  "dist": {
    "shasum": "0ab94540502ba7afa24c856aa985561669e9c52d",
    "size": 17943,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/is_js/download/is_js-0.9.0.tgz"
  },
  "files": [
    "is.js",
    "is.min.js"
  ],
  "homepage": "http://is.js.org/",
  "license": "MIT",
  "main": "is.js",
  "maintainers": [
    {
      "name": "arasatasaygin",
      "email": "arasatasaygin@gmail.com"
    },
    {
      "name": "jdalton",
      "email": "john.david.dalton@gmail.com"
    }
  ],
  "name": "is_js",
  "optionalDependencies": {},
  "pre-commit": [
    "lint"
  ],
  "publish_time": 1473800672526,
  "readme": "is.js\n=====\n\n[![JS.ORG](https://img.shields.io/badge/js.org-is-ffb400.svg?style=flat-square)](http://js.org)\n\n####This is a general-purpose check library.\n- No dependencies\n- AMD, Node & browser ready\n\n####Usage:\n\nNode.js:\n```\nnpm install is_js\n```\n\nBower:\n```\nbower install is_js\n```\n\nBuild:\n```\nnpm run build\n```\n\nTest:\n```\nnpm test\n```\n\n####Contributing:\nThanks for considering to contribute. Check [here](CONTRIBUTING.md)\n\n####Contributors:\nMany thanks to our contributors: https://github.com/arasatasaygin/is.js/graphs/contributors\n\nType checks\n===========\n\nis.arguments(value:any)\n-----------------------\n####Checks if the given value type is arguments.\ninterfaces: not, all, any\n\n```javascript\nvar getArguments = function() {\n    return arguments;\n};\nvar arguments = getArguments();\n\nis.arguments(arguments);\n=> true\n\nis.not.arguments({foo: 'bar'});\n=> true\n\nis.all.arguments(arguments, 'bar');\n=> false\n\nis.any.arguments(['foo'], arguments);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.arguments([arguments, 'foo', 'bar']);\n=> false\n```\n\nis.array(value:any)\n-------------------\n####Checks if the given value type is array.\ninterfaces: not, all, any\n\n```javascript\nis.array(['foo', 'bar', 'baz']);\n=> true\n\nis.not.array({foo: 'bar'});\n=> true\n\nis.all.array(['foo'], 'bar');\n=> false\n\nis.any.array(['foo'], 'bar');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.array([[1, 2], 'foo', 'bar']);\n=> false\n```\n\nis.boolean(value:any)\n---------------------\n####Checks if the given value type is boolean.\ninterfaces: not, all, any\n\n```javascript\nis.boolean(true);\n=> true\n\nis.not.boolean({foo: 'bar'});\n=> true\n\nis.all.boolean(true, 'bar');\n=> false\n\nis.any.boolean(true, 'bar');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.boolean([true, 'foo', 'bar']);\n=> false\n```\n\nis.date(value:any)\n------------------\n####Checks if the given value type is date.\ninterfaces: not, all, any\n\n```javascript\nis.date(new Date());\n=> true\n\nis.not.date({foo: 'bar'});\n=> true\n\nis.all.date(new Date(), 'bar');\n=> false\n\nis.any.date(new Date(), 'bar');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.date([new Date(), 'foo', 'bar']);\n=> false\n```\n\nis.domNode(value:any)\n-----------------------------\n####Checks if the given object is a dom node.\ninterfaces: not, all, any\n\n```javascript\nvar obj = document.createElement('div');\nis.domNode(obj);\n=> true\n\nis.domNode({nope: 'nope'});\n=> false\n\nis.not.domNode({});\n=> true\n\nis.all.domNode(obj, obj);\n=> true\n\nis.any.domNode(obj, {nope: 'nope'});\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.domNode([obj, {nope: 'nope'}]);\n=> false\n```\n\nis.error(value:any)\n-------------------\n####Checks if the given value type is error.\ninterfaces: not, all, any\n\n```javascript\nis.error(new Error());\n=> true\n\nis.not.error({foo: 'bar'});\n=> true\n\nis.all.error(new Error(), 'bar');\n=> false\n\nis.any.error(new Error(), 'bar');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.error([new Error(), 'foo', 'bar']);\n=> false\n```\n\nis.function(value:any)\n----------------------\n####Checks if the given value type is function.\ninterfaces: not, all, any\n\n```javascript\nis.function(toString);\n=> true\n\nis.not.function({foo: 'bar'});\n=> true\n\nis.all.function(toString, 'bar');\n=> false\n\nis.any.function(toString, 'bar');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.function([toString, 'foo', 'bar']);\n=> false\n```\n\nis.nan(value:any)\n-----------------\n####Checks if the given value type is NaN.\ninterfaces: not, all, any\n\n```javascript\nis.nan(NaN);\n=> true\n\nis.not.nan(42);\n=> true\n\nis.all.nan(NaN, 1);\n=> false\n\nis.any.nan(NaN, 2);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.nan([NaN, 'foo', 1]);\n=> false\n```\n\nis.null(value:any)\n------------------\n####Checks if the given value type is null.\ninterfaces: not, all, any\n\n```javascript\nis.null(null);\n=> true\n\nis.not.null(42);\n=> true\n\nis.all.null(null, 1);\n=> false\n\nis.any.null(null, 2);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.null([null, 'foo', 1]);\n=> false\n```\n\nis.number(value:any)\n--------------------\n####Checks if the given value type is number.\ninterfaces: not, all, any\n\n```javascript\nis.number(42);\n=> true\n\nis.number(NaN);\n=> false\n\nis.not.number('42');\n=> true\n\nis.all.number('foo', 1);\n=> false\n\nis.any.number({}, 2);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.number([42, 'foo', 1]);\n=> false\n```\n\nis.object(value:any)\n--------------------\n####Checks if the given value type is object.\ninterfaces: not, all, any\n\n```javascript\nis.object({foo: 'bar'});\n=> true\n\n// functions are also returning as true\nis.object(toString);\n=> true\n\nis.not.object('foo');\n=> true\n\nis.all.object({}, 1);\n=> false\n\nis.any.object({}, 2);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.object([{}, new Object()]);\n=> true\n```\n\nis.json(value:any)\n--------------------\n####Checks if the given value type is pure json object.\ninterfaces: not, all, any\n\n```javascript\nis.json({foo: 'bar'});\n=> true\n\n// functions are returning as false\nis.json(toString);\n=> false\n\nis.not.json([]);\n=> true\n\nis.all.json({}, 1);\n=> false\n\nis.any.json({}, 2);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.json([{}, {foo: 'bar'}]);\n=> true\n```\n\nis.regexp(value:any)\n--------------------\n####Checks if the given value type is RegExp.\ninterfaces: not, all, any\n\n```javascript\nis.regexp(/test/);\n=> true\n\nis.not.regexp(['foo']);\n=> true\n\nis.all.regexp(/test/, 1);\n=> false\n\nis.any.regexp(new RegExp('ab+c'), 2);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.regexp([{}, /test/]);\n=> false\n```\n\nis.string(value:any)\n--------------------\n####Checks if the given value type is string.\ninterfaces: not, all, any\n\n```javascript\nis.string('foo');\n=> true\n\nis.not.string(['foo']);\n=> true\n\nis.all.string('foo', 1);\n=> false\n\nis.any.string('foo', 2);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.string([{}, 'foo']);\n=> false\n```\n\nis.char(value:any)\n--------------------\n####Checks if the given value type is char.\ninterfaces: not, all, any\n\n```javascript\nis.char('f');\n=> true\n\nis.not.char(['foo']);\n=> true\n\nis.all.char('f', 1);\n=> false\n\nis.any.char('f', 2);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.char(['f', 'o', 'o']);\n=> true\n```\n\nis.undefined(value:any)\n-----------------------\n####Checks if the given value type is undefined.\ninterfaces: not, all, any\n\n```javascript\nis.undefined(undefined);\n=> true\n\nis.not.undefined(null);\n=> true\n\nis.all.undefined(undefined, 1);\n=> false\n\nis.any.undefined(undefined, 2);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.undefined([{}, undefined]);\n=> false\n```\n\nis.sameType(value:any, other:any)\n---------------------------------\n####Checks if the given value types are same type.\ninterface: not\n\n```javascript\nis.sameType(42, 7);\n=> true\n\nis.sameType(42, '7');\n=> false\n\nis.not.sameType(42, 7);\n=> false\n```\n\nis.windowObject(value:any)\n-----------------------------\n####Checks if the given object is window object.\ninterfaces: not, all, any\n\n```javascript\nis.windowObject(window);\n=> true\n\nis.windowObject({nope: 'nope'});\n=> false\n\nis.not.windowObject({});\n=> true\n\nis.all.windowObject(window, {nope: 'nope'});\n=> false\n\nis.any.windowObject(window, {nope: 'nope'});\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.windowObject([window, {nope: 'nope'}]);\n=> false\n```\n\nPresence checks\n===============\n\nis.empty(value:array|object|string)\n-----------------------------------\n####Checks if the given value is empty.\ninterfaces: not, all, any\n\n```javascript\nis.empty({});\n=> true\n\nis.empty([]);\n=> true\n\nis.empty('');\n=> true\n\nis.not.empty(['foo']);\n=> true\n\nis.all.empty('', {}, ['foo']);\n=> false\n\nis.any.empty([], 42);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.empty([{}, 'foo']);\n=> false\n```\n\nis.existy(value:any)\n--------------------\n####Checks if the given value is existy. (not null or undefined)\ninterfaces: not, all, any\n\n```javascript\nis.existy({});\n=> true\n\nis.existy(null);\n=> false\n\nis.not.existy(undefined);\n=> true\n\nis.all.existy(null, ['foo']);\n=> false\n\nis.any.existy(undefined, 42);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.existy([{}, 'foo']);\n=> true\n```\n\nis.truthy(value:any)\n--------------------\n####Checks if the given value is truthy. (existy and not false)\ninterfaces: not, all, any\n\n```javascript\nis.truthy(true);\n=> true\n\nis.truthy(null);\n=> false\n\nis.not.truthy(false);\n=> true\n\nis.all.truthy(null, true);\n=> false\n\nis.any.truthy(undefined, true);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.truthy([{}, true]);\n=> true\n```\n\nis.falsy(value:any)\n-------------------\n####Checks if the given value is falsy.\ninterfaces: not, all, any\n\n```javascript\nis.falsy(false);\n=> true\n\nis.falsy(null);\n=> true\n\nis.not.falsy(true);\n=> true\n\nis.all.falsy(null, false);\n=> true\n\nis.any.falsy(undefined, true);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.falsy([false, true, undefined]);\n=> false\n```\n\nis.space(value:any)\n----------------------\n####Checks if the given value is space.\ninterfaces: not, all, any\n\n```javascript\nis.space(' ');\n=> true\n\nis.space('foo');\n=> false\n\nis.not.space(true);\n=> true\n\nis.all.space(' ', 'foo');\n=> false\n\nis.any.space(' ', true);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.space([' ', 'foo', undefined]);\n=> false\n```\n\nRegExp checks\n=============\n\nis.url(value:any)\n-----------------\n####Checks if the given value matches url regexp.\ninterfaces: not, all, any\n\n```javascript\nis.url('http://www.test.com');\n=> true\n\nis.url('foo');\n=> false\n\nis.not.url(true);\n=> true\n\nis.all.url('http://www.test.com', 'foo');\n=> false\n\nis.any.url('http://www.test.com', true);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.url(['http://www.test.com', 'foo', undefined]);\n=> false\n```\n\nis.email(value:any)\n-------------------\n####Checks if the given value matches email regexp.\ninterfaces: not, all, any\n\n```javascript\nis.email('test@test.com');\n=> true\n\nis.email('foo');\n=> false\n\nis.not.email('foo');\n=> true\n\nis.all.email('test@test.com', 'foo');\n=> false\n\nis.any.email('test@test.com', 'foo');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.email(['test@test.com', 'foo', undefined]);\n=> false\n```\n\nis.creditCard(value:any)\n------------------------\n####Checks if the given value matches credit card regexp.\ninterfaces: not, all, any\n\n```javascript\nis.creditCard(378282246310005);\n=> true\n\nis.creditCard(123);\n=> false\n\nis.not.creditCard(123);\n=> true\n\nis.all.creditCard(378282246310005, 123);\n=> false\n\nis.any.creditCard(378282246310005, 123);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.creditCard([378282246310005, 123, undefined]);\n=> false\n```\n\nis.alphaNumeric(value:any)\n--------------------------\n####Checks if the given value matches alpha numeric regexp.\ninterfaces: not, all, any\n\n```javascript\nis.alphaNumeric('alphaNu3er1k');\n=> true\n\nis.alphaNumeric('*?');\n=> false\n\nis.not.alphaNumeric('*?');\n=> true\n\nis.all.alphaNumeric('alphaNu3er1k', '*?');\n=> false\n\nis.any.alphaNumeric('alphaNu3er1k', '*?');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.alphaNumeric(['alphaNu3er1k', '*?']);\n=> false\n```\n\nis.timeString(value:any)\n------------------------\n####Checks if the given value matches time string regexp.\ninterfaces: not, all, any\n\n```javascript\nis.timeString('13:45:30');\n=> true\n\nis.timeString('90:90:90');\n=> false\n\nis.not.timeString('90:90:90');\n=> true\n\nis.all.timeString('13:45:30', '90:90:90');\n=> false\n\nis.any.timeString('13:45:30', '90:90:90');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.timeString(['13:45:30', '90:90:90']);\n=> false\n```\n\nis.dateString(value:any)\n------------------------\n####Checks if the given value matches date string regexp.\ninterfaces: not, all, any\n\n```javascript\nis.dateString('11/11/2011');\n=> true\n\nis.dateString('10-21-2012');\n=> true\n\nis.dateString('90/11/2011');\n=> false\n\nis.not.dateString('90/11/2011');\n=> true\n\nis.all.dateString('11/11/2011', '90/11/2011');\n=> false\n\nis.any.dateString('11-11-2011', '90/11/2011');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.dateString(['11/11/2011', '90/11/2011']);\n=> false\n```\n\nis.usZipCode(value:any)\n-----------------------\n####Checks if the given value matches US zip code regexp.\ninterfaces: not, all, any\n\n```javascript\nis.usZipCode('02201-1020');\n=> true\n\nis.usZipCode('123');\n=> false\n\nis.not.usZipCode('123');\n=> true\n\nis.all.usZipCode('02201-1020', '123');\n=> false\n\nis.any.usZipCode('02201-1020', '123');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.usZipCode(['02201-1020', '123']);\n=> false\n```\n\nis.caPostalCode(value:any)\n--------------------------\n####Checks if the given value matches Canada postal code regexp.\ninterfaces: not, all, any\n\n```javascript\nis.caPostalCode('L8V3Y1');\n=> true\n\nis.caPostalCode('L8V 3Y1');\n=> true\n\nis.caPostalCode('123');\n=> false\n\nis.not.caPostalCode('123');\n=> true\n\nis.all.caPostalCode('L8V3Y1', '123');\n=> false\n\nis.any.caPostalCode('L8V3Y1', '123');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.caPostalCode(['L8V3Y1', '123']);\n=> false\n```\n\nis.ukPostCode(value:any)\n------------------------\n####Checks if the given value matches UK post code regexp.\ninterfaces: not, all, any\n\n```javascript\nis.ukPostCode('B184BJ');\n=> true\n\nis.ukPostCode('123');\n=> false\n\nis.not.ukPostCode('123');\n=> true\n\nis.all.ukPostCode('B184BJ', '123');\n=> false\n\nis.any.ukPostCode('B184BJ', '123');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.ukPostCode(['B184BJ', '123']);\n=> false\n```\n\nis.nanpPhone(value:any)\n-----------------------\n####Checks if the given value matches North American numbering plan phone regexp.\ninterfaces: not, all, any\n\n```javascript\nis.nanpPhone('609-555-0175');\n=> true\n\nis.nanpPhone('123');\n=> false\n\nis.not.nanpPhone('123');\n=> true\n\nis.all.nanpPhone('609-555-0175', '123');\n=> false\n\nis.any.nanpPhone('609-555-0175', '123');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.nanpPhone(['609-555-0175', '123']);\n=> false\n```\n\nis.eppPhone(value:any)\n----------------------\n####Checks if the given value matches extensible provisioning protocol phone regexp.\ninterfaces: not, all, any\n\n```javascript\nis.eppPhone('+90.2322456789');\n=> true\n\nis.eppPhone('123');\n=> false\n\nis.not.eppPhone('123');\n=> true\n\nis.all.eppPhone('+90.2322456789', '123');\n=> false\n\nis.any.eppPhone('+90.2322456789', '123');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.eppPhone(['+90.2322456789', '123']);\n=> false\n```\n\nis.socialSecurityNumber(value:any)\n----------------------------------\n####Checks if the given value matches social security number regexp.\ninterfaces: not, all, any\n\n```javascript\nis.socialSecurityNumber('017-90-7890');\n=> true\n\nis.socialSecurityNumber('017907890');\n=> true\n\nis.socialSecurityNumber('123');\n=> false\n\nis.not.socialSecurityNumber('123');\n=> true\n\nis.all.socialSecurityNumber('017-90-7890', '123');\n=> false\n\nis.any.socialSecurityNumber('017907890', '123');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.socialSecurityNumber(['017-90-7890', '123']);\n=> false\n```\n\nis.affirmative(value:any)\n-------------------------\n####Checks if the given value matches affirmative regexp.\ninterfaces: not, all, any\n\n```javascript\nis.affirmative('yes');\n=> true\n\nis.affirmative('no');\n=> false\n\nis.not.affirmative('no');\n=> true\n\nis.all.affirmative('yes', 'no');\n=> false\n\nis.any.affirmative('yes', 'no');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.affirmative(['yes', 'y', 'true', 't', 'ok', 'okay']);\n=> true\n```\n\nis.hexadecimal(value:any)\n-------------------------\n####Checks if the given value matches hexadecimal regexp.\ninterfaces: not, all, any\n\n```javascript\nis.hexadecimal('f0f0f0');\n=> true\n\nis.hexadecimal('0xf0f0f0');\n=> true\n\nis.hexadecimal(2.5);\n=> false\n\nis.not.hexadecimal('string');\n=> true\n\nis.all.hexadecimal('ff', 'f50');\n=> true\n\nis.any.hexadecimal('0xff5500', true);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.hexadecimal(['fff', '333', 'f50']);\n=> true\n```\n\nis.hexColor(value:any)\n-------------------------\n####Checks if the given value matches hexcolor regexp.\ninterfaces: not, all, any\n\n```javascript\nis.hexColor('#333');\n=> true\n\nis.hexColor('#3333');\n=> false\n\nis.not.hexColor(0.5);\n=> true\n\nis.all.hexColor('fff', 'f50');\n=> true\n\nis.any.hexColor('ff5500', 0.5);\n=> false\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.hexColor(['fff', '333', 'f50']);\n=> true\n```\n\nis.ip(value:any)\n-------------------------\n####Checks if the given value matches ip regexp\ninterfaces: not, all, any\n\n```javascript\nis.ip('198.156.23.5');\n=> true\n\nis.ip('1.2..5');\n=> false\n\nis.not.ip('8:::::::7');\n=> true\n\nis.all.ip('0:1::4:ff5:54:987:C', '123.123.123.123');\n=> true\n\nis.any.ip('123.8.4.3', '0.0.0.0');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.ip(['123.123.23.12', 'A:B:C:D:E:F:0:0']);\n=> true\n```\n\nis.ipv4(value:any)\n-------------------------\n####Checks if the given value matches ipv4 regexp\ninterfaces: not, all, any\n\n```javascript\nis.ipv4('198.12.3.142');\n=> true\n\nis.ipv4('1.2..5');\n=> false\n\nis.not.ipv4('8:::::::7');\n=> true\n\nis.all.ipv4('198.12.3.142', '123.123.123.123');\n=> true\n\nis.any.ipv4('255.255.255.255', '850..1.4');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.ipv4(['198.12.3.142', '1.2.3']);\n=> false\n\n```\n\nis.ipv6(value:any)\n-------------------------\n####Checks if the given value matches ipv6 regexp\ninterfaces: not, all, any\n\n```javascript\nis.ipv6('2001:DB8:0:0:1::1');\n=> true\n\nis.ipv6('985.12.3.4');\n=> true\n\nis.not.ipv6('8:::::::7');\n=> true\n\nis.all.ipv6('2001:DB8:0:0:1::1', '1:50:198:2::1:2:8');\n=> true\n\nis.any.ipv6('255.255.255.255', '2001:DB8:0:0:1::1');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.ipv6(['2001:DB8:0:0:1::1', '1.2.3']);\n=> false\n```\n\nString checks\n=============\n\nis.include(value:string, target:string)\n-----------------------------------------\n####Checks if the given string contains a substring.\ninterface: not\n\n```javascript\nis.include('Some text goes here', 'text');\n=> true\n\nis.include('test', 'text');\n=> false\n\nis.not.include('test', 'text');\n=> true\n```\n\nis.upperCase(value:string)\n--------------------------\n####Checks if the given string is UPPERCASE.\ninterfaces: not, all, any\n\n```javascript\nis.upperCase('YEAP');\n=> true\n\nis.upperCase('nope');\n=> false\n\nis.not.upperCase('Nope');\n=> true\n\nis.all.upperCase('YEAP', 'nope');\n=> false\n\nis.any.upperCase('YEAP', 'nope');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.upperCase(['YEAP', 'ALL UPPERCASE']);\n=> true\n```\n\n\nis.lowerCase(value:string)\n--------------------------\n####Checks if the given string is lowercase.\ninterfaces: not, all, any\n\n```javascript\nis.lowerCase('yeap');\n=> true\n\nis.lowerCase('NOPE');\n=> false\n\nis.not.lowerCase('Nope');\n=> true\n\nis.all.lowerCase('yeap', 'NOPE');\n=> false\n\nis.any.lowerCase('yeap', 'NOPE');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.lowerCase(['yeap', 'all lowercase']);\n=> true\n```\n\nis.startWith(value:string, target:string)\n-------------------------------------------\n####Checks if the given string starts with substring.\ninterface: not\n\n```javascript\nis.startWith('yeap', 'ye');\n=> true\n\nis.startWith('nope', 'ye');\n=> false\n\nis.not.startWith('nope not that', 'not');\n=> true\n```\n\nis.endWith(value:string, target:string)\n-----------------------------------------\n####Checks if the given string ends with substring.\ninterfaces: not\n\n```javascript\nis.endWith('yeap', 'ap');\n=> true\n\nis.endWith('nope', 'no');\n=> false\n\nis.not.endWith('nope not that', 'not');\n=> true\n\nis.endWith('yeap that one', 'one');\n=> true\n```\n\nis.capitalized(value:string)\n---------------------------------------------\n####Checks if the given string is capitalized.\ninterfaces: not, all, any\n\n```javascript\nis.capitalized('Yeap');\n=> true\n\nis.capitalized('nope');\n=> false\n\nis.not.capitalized('nope not capitalized');\n=> true\n\nis.not.capitalized('nope Capitalized');\n=> true\n\nis.all.capitalized('Yeap', 'All', 'Capitalized');\n=> true\n\nis.any.capitalized('Yeap', 'some', 'Capitalized');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.capitalized(['Nope', 'not']);\n=> false\n```\n\nis.palindrome(value:string)\n---------------------------------------------\n####Checks if the given string is palindrome.\ninterfaces: not, all, any\n\n```javascript\nis.palindrome('testset');\n=> true\n\nis.palindrome('A man, a plan, a canal - Panama!');\n=> true\n\nis.palindrome('nope');\n=> false\n\nis.not.palindrome('nope not palindrome');\n=> true\n\nis.not.palindrome('tt');\n=> false\n\nis.all.palindrome('testset', 'tt');\n=> true\n\nis.any.palindrome('Yeap', 'some', 'testset');\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.palindrome(['Nope', 'testset']);\n=> false\n```\n\nArithmetic checks\n=================\n\nis.equal(value:any, other:any)\n------------------------------\n####Checks if the given values are equal.\ninterfaces: not\n\n```javascript\nis.equal(42, 40 + 2);\n=> true\n\nis.equal('yeap', 'yeap');\n=> true\n\nis.equal(true, true);\n=> true\n\nis.not.equal('yeap', 'nope');\n=> true\n```\n\nis.even(value:number)\n---------------------\n####Checks if the given value is even.\ninterfaces: not, all, any\n\n```javascript\nis.even(42);\n=> true\n\nis.not.even(41);\n=> true\n\nis.all.even(40, 42, 44);\n=> true\n\nis.any.even(39, 42, 43);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.even([40, 42, 43]);\n=> false\n```\n\nis.odd(value:number)\n--------------------\n####Checks if the given value is odd.\ninterfaces: not, all, any\n\n```javascript\nis.odd(41);\n=> true\n\nis.not.odd(42);\n=> true\n\nis.all.odd(39, 41, 43);\n=> true\n\nis.any.odd(39, 42, 44);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.odd([40, 42, 43]);\n=> false\n```\n\nis.positive(value:number)\n-------------------------\n####Checks if the given value is positive.\ninterfaces: not, all, any\n\n```javascript\nis.positive(41);\n=> true\n\nis.not.positive(-42);\n=> true\n\nis.all.positive(39, 41, 43);\n=> true\n\nis.any.positive(-39, 42, -44);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.positive([40, 42, -43]);\n=> false\n```\n\nis.negative(value:number)\n-------------------------\n####Checks if the given value is negative.\ninterfaces: not, all, any\n\n```javascript\nis.negative(-41);\n=> true\n\nis.not.negative(42);\n=> true\n\nis.all.negative(-39, -41, -43);\n=> true\n\nis.any.negative(-39, 42, 44);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.negative([40, 42, -43]);\n=> false\n```\n\nis.above(value:number, min:number)\n---------------------------\n####Checks if the given value is above minimum value.\ninterface: not\n\n```javascript\nis.above(41, 30);\n=> true\n\nis.not.above(42, 50);\n=> true\n```\n\nis.under(value:number, max:number)\n---------------------------\n####Checks if the given value is under maximum value.\ninterface: not\n\n```javascript\nis.under(30, 35);\n=> true\n\nis.not.under(42, 30);\n=> true\n```\n\nis.within(value:number, min:number, max:number)\n---------------------------------\n####Checks if the given value is within minimum and maximum values.\ninterface: not\n\n```javascript\nis.within(30, 20, 40);\n=> true\n\nis.not.within(40, 30, 35);\n=> true\n```\n\nis.decimal(value:number)\n------------------------\n####Checks if the given value is decimal.\ninterfaces: not, all, any\n\n```javascript\nis.decimal(41.5);\n=> true\n\nis.not.decimal(42);\n=> true\n\nis.all.decimal(39.5, 41.5, -43.5);\n=> true\n\nis.any.decimal(-39, 42.5, 44);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.decimal([40, 42.5, -43]);\n=> false\n```\n\nis.integer(value:number)\n------------------------\n####Checks if the given value is integer.\ninterfaces: not, all, any\n\n```javascript\nis.integer(41);\n=> true\n\nis.not.integer(42.5);\n=> true\n\nis.all.integer(39, 41, -43);\n=> true\n\nis.any.integer(-39, 42.5, 44);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.integer([40, 42.5, -43]);\n=> false\n```\n\nis.finite(value:number)\n-----------------------\n####Checks if the given value is finite.\ninterfaces: not, all, any\n\n```javascript\nis.finite(41);\n=> true\n\nis.not.finite(42 / 0);\n=> true\n\nis.all.finite(39, 41, -43);\n=> true\n\nis.any.finite(-39, Infinity, 44);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.finite([Infinity, -Infinity, 42.5]);\n=> false\n```\n\nis.infinite(value:number)\n-------------------------\n####Checks if the given value is infinite.\ninterfaces: not, all, any\n\n```javascript\nis.infinite(Infinity);\n=> true\n\nis.not.infinite(42);\n=> true\n\nis.all.infinite(Infinity, -Infinity, -43 / 0);\n=> true\n\nis.any.infinite(-39, Infinity, 44);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.infinite([Infinity, -Infinity, 42.5]);\n=> false\n```\n\nObject checks\n=============\n\nis.propertyCount(value:object, count:number)\n-------------------------------------\n####Checks if objects' property count is equal to given count.\ninterface: not\n\n```javascript\nis.propertyCount({this: 'is', 'sample': object}, 2);\n=> true\n\nis.propertyCount({this: 'is', 'sample': object}, 3);\n=> false\n\nis.not.propertyCount({}, 2);\n=> true\n```\n\nis.propertyDefined(value:object, property:string)\n------------------------------------------\n####Checks if the given property is defined on object.\ninterface: not\n\n```javascript\nis.propertyDefined({yeap: 'yeap'}, 'yeap');\n=> true\n\nis.propertyDefined({yeap: 'yeap'}, 'nope');\n=> false\n\nis.not.propertyDefined({}, 'nope');\n=> true\n```\n\nArray checks\n============\n\nis.inArray(value:any, array)\n---------------------\n####Checks if the given item is in array?\ninterface: not\n```javascript\nis.inArray(2, [1, 2, 3]);\n=> true\n\nis.inArray(4, [1, 2, 3]);\n=> false\n\nis.not.inArray(4, [1, 2, 3]);\n=> true\n```\n\nis.sorted(value:array, sign:string)\n----------------------\n####Checks if the given array is sorted. Sign is optional parameter.\ninterfaces: not, all, any\n\n```javascript\nis.sorted([1, 2, 3]);\n=> true\n\nis.sorted([1, 2, 4, 3]);\n=> false\n\nis.sorted([1, 1, 2, 2], '>=');\n=> true\n\nis.sorted([1, 2, 3, 4], '>');\n=> true\n\nis.sorted([4, 3, 3, 1], '<=');\n=> true\n\nis.sorted([4, 3, 2, 1], '<');\n=> true\n\nis.sorted([1, 2, 3, 3], '>');\n=> false\n\nis.not.sorted([5, 4, 3]);\n=> true\n\nis.not.sorted([5, 4, 3], '<');\n=> false\n\nis.all.sorted([1, 2], [3, 4]);\n=> true\n\nis.any.sorted([1, 2], [5, 4]);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.sorted([[1, 2], [5, 4]]);\n=> false\n```\n\nEnvironment checks\n==================\n####Environment checks are not available as node module.\n\nis.ie(range:number|string)\n-------------------\n####Checks if current browser is ie. Parameter is optional version range (or number) of browser.\ninterface: not\n\n```javascript\nis.ie();\n=> true if current browser is ie\n\nis.not.ie();\n=> false if current browser is ie\n\n// also supports version number\nis.ie(10);\n=> true if current version of ie is 10\n\nis.ie('>=10');\n=> true if current version of ie is greater than or equal to 10\n\nis.not.ie('<9');\n=> true if current version of ie is not less than 9\n```\n\nis.chrome(range:number|string)\n-----------\n####Checks if current browser is chrome. Parameter is optional version range (or number) of browser.\ninterface: not\n\n```javascript\nis.chrome();\n=> true if current browser is chrome\n\nis.not.chrome();\n=> false if current browser is chrome\n\n// also supports version number\nis.chrome(50);\n=> true if current version of chrome is 50\n\nis.chrome('>=40');\n=> true if current version of chrome is greater than or equal to 40\n\nis.not.chrome('<30');\n=> true if current version of chrome is not less than 30\n```\n\nis.firefox(range:number|string)\n------------\n####Checks if current browser is firefox. Parameter is optional version range (or number) of browser.\ninterface: not\n\n```javascript\nis.firefox();\n=> true if current browser is firefox\n\nis.not.firefox();\n=> false if current browser is firefox\n\n// also supports version number\nis.firefox(41);\n=> true if current version of firefox is 41\n\nis.firefox('>=40');\n=> true if current version of firefox is greater than or equal to 40\n\nis.not.firefox('<30');\n=> true if current version of firefox is not less than 30\n```\n\nis.edge(range:number|string)\n------------\n####Checks if current browser is edge. Parameter is optional version range (or number) of browser.\ninterface: not\n\n```javascript\nis.edge();\n=> true if current browser is edge\n\nis.not.edge();\n=> false if current browser is edge\n\n// also supports version number\nis.edge(13);\n=> true if current version of edge is 13\n\nis.edge('>=12');\n=> true if current version of edge is greater than or equal to 12\n\nis.not.edge('<13');\n=> true if current version of edge is not less than 13\n```\n\nis.opera(range:number|string)\n----------\n####Checks if current browser is opera. Parameter is optional version range (or number) of browser.\ninterface: not\n\n```javascript\nis.opera();\n=> true if current browser is opera\n\nis.not.opera();\n=> false if current browser is opera\n\n// also supports version number\nis.opera(36);\n=> true if current version of opera is 36\n\nis.opera('>=35');\n=> true if current version of opera is greater than or equal to 35\n\nis.not.opera('<20');\n=> true if current version of opera is not less than 20\n```\n\nis.safari(range:number|string)\n-----------\n####Checks if current browser is safari. Parameter is optional version range (or number) of browser.\ninterface: not\n\n```javascript\nis.safari();\n=> true if current browser is safari\n\nis.not.safari();\n=> false if current browser is safari\n\n// also supports version number\nis.safari(9);\n=> true if current version of safari is 9\n\nis.safari('>=8');\n=> true if current version of safari is greater than or equal to 8\n\nis.not.safari('<7');\n=> true if current version of safari is not less than 7\n```\n\nis.phantom(range:number|string)\n-----------\n####Checks if current browser is phantomjs. Parameter is optional version range (or number) of browser.\ninterface: not\n\n```javascript\nis.phantom();\n=> true if current browser is phantomjs\n\nis.not.phantom();\n=> false if current browser is phantomjs\n\n// also supports version number\nis.phantom(2);\n=> true if current version of phantom is 2\n\nis.phantom('>=1');\n=> true if current version of phantomjs is greater than or equal to 1\n\nis.not.phantom('<2');\n=> true if current version of phantomjs is not less than 2\n```\n\nis.ios()\n--------\n####Checks if current device has ios.\ninterface: not\n\n```javascript\nis.ios();\n=> true if current device is iPhone, iPad or iPod\n\nis.not.ios();\n=> true if current device is not iPhone, iPad or iPod\n```\n\nis.iphone(range:number|string)\n-----------\n####Checks if current device is iPhone. Parameter is optional version range (or number) of browser.\ninterface: not\n\n```javascript\nis.iphone();\n=> true if current device is iPhone\n\nis.not.iphone();\n=> true if current device is not iPhone\n\n// also supports version number\nis.iphone(9);\n=> true if current version of iPhone is 9\n\nis.iphone('>=7');\n=> true if current version of iPhone is greater than or equal to 7\n\nis.not.iphone('<8');\n=> true if current version of iPhone is not less than 8\n```\n\nis.ipad(range:number|string)\n---------\n####Checks if current device is iPad.\ninterface: not\n\n```javascript\nis.ipad();\n=> true if current device is iPad\n\nis.not.ipad();\n=> true if current device is not iPad\n\n// also supports version number\nis.ipad(9);\n=> true if current version of iPad is 9\n\nis.ipad('>=7');\n=> true if current version of iPad is greater than or equal to 7\n\nis.not.ipad('<8');\n=> true if current version of iPad is not less than 8\n```\n\nis.ipod(range:number|string)\n---------\n####Checks if current device is iPod.\ninterface: not\n\n```javascript\nis.ipod();\n=> true if current device is iPod\n\nis.not.ipod();\n=> true if current device is not iPod\n\n// also supports version number\nis.ipod(7);\n=> true if current version of iPod is 7\n\nis.ipod('>=5');\n=> true if current version of iPod is greater than or equal to 5\n\nis.not.ipod('<5');\n=> true if current version of iPod is not less than 5\n```\n\nis.android()\n------------\n####Checks if current device has Android.\ninterface: not\n\n```javascript\nis.android();\n=> true if current device has Android OS\n\nis.not.android();\n=> true if current device has not Android OS\n```\n\nis.androidPhone()\n-----------------\n####Checks if current device is Android phone.\ninterface: not\n\n```javascript\nis.androidPhone();\n=> true if current device is Android phone\n\nis.not.androidPhone();\n=> true if current device is not Android phone\n```\n\nis.androidTablet()\n------------------\n####Checks if current device is Android tablet.\ninterface: not\n\n```javascript\nis.androidTablet();\n=> true if current device is Android tablet\n\nis.not.androidTablet();\n=> true if current device is not Android tablet\n```\n\nis.blackberry()\n---------------\n####Checks if current device is Blackberry.\ninterface: not\n\n```javascript\nis.blackberry();\n=> true if current device is Blackberry\n\nis.not.blackberry();\n=> true if current device is not Blackberry\n```\n\nis.windowsPhone()\n-----------------\n####Checks if current device is Windows phone.\ninterface: not\n\n```javascript\nis.windowsPhone();\n=> true if current device is Windows phone\n\nis.not.windowsPhone();\n=> true if current device is not Windows Phone\n```\n\nis.windowsTablet()\n------------------\n####Checks if current device is Windows tablet.\ninterface: not\n\n```javascript\nis.windowsTablet();\n=> true if current device is Windows tablet\n\nis.not.windowsTablet();\n=> true if current device is not Windows tablet\n```\n\nis.windows()\n------------\n####Checks if current OS is Windows.\ninterface: not\n\n```javascript\nis.windows();\n=> true if current OS is Windows\n\nis.not.windows();\n=> true if current OS is not Windows\n```\n\nis.mac()\n--------\n####Checks if current OS is Mac OS X.\ninterface: not\n\n```javascript\nis.mac();\n=> true if current OS is Mac OS X\n\nis.not.mac();\n=> true if current OS is not Mac OS X\n```\n\nis.linux()\n----------\n####Checks if current OS is linux.\ninterface: not\n\n```javascript\nis.linux();\n=> true if current OS is linux\n\nis.not.linux();\n=> true if current OS is not linux\n```\n\nis.desktop()\n------------\n####Checks if current device is desktop.\ninterface: not\n\n```javascript\nis.desktop();\n=> true if current device is desktop\n\nis.not.desktop();\n=> true if current device is not desktop\n```\n\nis.mobile()\n-----------\n####Checks if current device is mobile.\ninterface: not\niPhone, iPod, Android Phone, Windows Phone, Blackberry.\n```javascript\n\nis.mobile();\n=> true if current device is mobile\n\nis.not.mobile();\n=> true if current device is not mobile\n```\n\nis.tablet()\n-----------\n####Checks if current device is tablet.\ninterface: not\niPad, Android Tablet, Windows Tablet\n```javascript\n\nis.tablet();\n=> true if current device is tablet\n\nis.not.tablet();\n=> true if current device is not tablet\n```\n\nis.online()\n-----------\n####Checks if current device is online.\ninterface: not\n\n```javascript\nis.online();\n=> true if current device is online\n\nis.not.online();\n=> true if current device is not online\n```\n\nis.offline()\n------------\n####Checks if current device is offline.\ninterface: not\n\n```javascript\nis.offline();\n=> true if current device is offline\n\nis.not.offline();\n=> true if current device is not offline\n```\n\nis.touchDevice()\n------------\n####Checks if current device supports touch.\ninterface: not\n\n```javascript\nis.touchDevice();\n=> true if current device supports touch\n\nis.not.touchDevice();\n=> true if current device does not support touch\n```\n\nTime checks\n===========\n\nis.today(value:date)\n----------------------\n####Checks if the given date object indicate today.\ninterfaces: not, all, any\n\n```javascript\nvar today = new Date();\nis.today(today);\n=> true\n\nvar yesterday = new Date(new Date().setDate(new Date().getDate() - 1));\nis.today(yesterday);\n=> false\n\nis.not.today(yesterday);\n=> true\n\nis.all.today(today, today);\n=> true\n\nis.any.today(today, yesterday);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.today([today, yesterday]);\n=> false\n```\n\nis.yesterday(value:date)\n--------------------------\n####Checks if the given date object indicate yesterday.\ninterfaces: not, all, any\n\n```javascript\nvar today = new Date();\nis.yesterday(today);\n=> false\n\nvar yesterday = new Date(new Date().setDate(new Date().getDate() - 1));\nis.yesterday(yesterday);\n=> true\n\nis.not.yesterday(today);\n=> true\n\nis.all.yesterday(yesterday, today);\n=> false\n\nis.any.yesterday(today, yesterday);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.yesterday([today, yesterday]);\n=> false\n```\n\nis.tomorrow(value:date)\n-------------------------\n####Checks if the given date object indicate tomorrow.\ninterfaces: not, all, any\n\n```javascript\nvar today = new Date();\nis.tomorrow(today);\n=> false\n\nvar tomorrow = new Date(new Date().setDate(new Date().getDate() + 1));\nis.tomorrow(tomorrow);\n=> true\n\nis.not.tomorrow(today);\n=> true\n\nis.all.tomorrow(tomorrow, today);\n=> false\n\nis.any.tomorrow(today, tomorrow);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.tomorrow([today, tomorrow]);\n=> false\n```\n\nis.past(value:date)\n---------------------\n####Checks if the given date object indicate past.\ninterfaces: not, all, any\n\n```javascript\nvar yesterday = new Date(new Date().setDate(new Date().getDate() - 1));\nvar tomorrow = new Date(new Date().setDate(new Date().getDate() + 1));\n\nis.past(yesterday);\n=> true\n\nis.past(tomorrow);\n=> false\n\nis.not.past(tomorrow);\n=> true\n\nis.all.past(tomorrow, yesterday);\n=> false\n\nis.any.past(yesterday, tomorrow);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.past([yesterday, tomorrow]);\n=> false\n```\n\nis.future(value:date)\n-----------------------\n####Checks if the given date object indicate future.\ninterfaces: not, all, any\n\n```javascript\nvar yesterday = new Date(new Date().setDate(new Date().getDate() - 1));\nvar tomorrow = new Date(new Date().setDate(new Date().getDate() + 1));\n\nis.future(yesterday);\n=> false\n\nis.future(tomorrow);\n=> true\n\nis.not.future(yesterday);\n=> true\n\nis.all.future(tomorrow, yesterday);\n=> false\n\nis.any.future(yesterday, tomorrow);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.future([yesterday, tomorrow]);\n=> false\n```\n\nis.day(value:date, day:string)\n-------------------------------\n####Checks if the given date objects' day equal given dayString parameter.\ninterface: not\n\n```javascript\nvar mondayObj = new Date('01/26/2015');\nvar tuesdayObj = new Date('01/27/2015');\nis.day(mondayObj, 'monday');\n=> true\n\nis.day(mondayObj, 'tuesday');\n=> false\n\nis.not.day(mondayObj, 'tuesday');\n=> true\n```\n\nis.month(value:date, month:string)\n-----------------------------------\n####Checks if the given date objects' month equal given monthString parameter.\ninterface: not\n\n```javascript\nvar januaryObj = new Date('01/26/2015');\nvar februaryObj = new Date('02/26/2015');\nis.month(januaryObj, 'january');\n=> true\n\nis.month(februaryObj, 'january');\n=> false\n\nis.not.month(februaryObj, 'january');\n=> true\n```\n\nis.year(value:date, year:number)\n---------------------------------\n####Checks if the given date objects' year equal given yearNumber parameter.\ninterface: not\n\n```javascript\nvar year2015 = new Date('01/26/2015');\nvar year2016 = new Date('01/26/2016');\nis.year(year2015, 2015);\n=> true\n\nis.year(year2016, 2015);\n=> false\n\nis.not.year(year2016, 2015);\n=> true\n```\n\nis.leapYear(value:number)\n---------------------------------\n####Checks if the given year number is a leap year\ninterfaces: not, all, any\n\n```javascript\nis.leapYear(2016);\n=> true\n\nis.leapYear(2015);\n=> false\n\nis.not.leapYear(2015);\n=> true\n\nis.all.leapYear(2015, 2016);\n=> false\n\nis.any.leapYear(2015, 2016);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.leapYear([2016, 2080]);\n=> true\n```\n\nis.weekend(value:date)\n------------------------\n####Checks if the given date objects' day is weekend.\ninterfaces: not, all, any\n\n```javascript\nvar monday = new Date('01/26/2015');\nvar sunday = new Date('01/25/2015');\nvar saturday = new Date('01/24/2015');\nis.weekend(sunday);\n=> true\n\nis.weekend(monday);\n=> false\n\nis.not.weekend(monday);\n=> true\n\nis.all.weekend(sunday, saturday);\n=> true\n\nis.any.weekend(sunday, saturday, monday);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.weekend([sunday, saturday, monday]);\n=> false\n```\n\nis.weekday(value:date)\n------------------------\n####Checks if the given date objects' day is weekday.\ninterfaces: not, all, any\n\n```javascript\nvar monday = new Date('01/26/2015');\nvar sunday = new Date('01/25/2015');\nvar saturday = new Date('01/24/2015');\nis.weekday(monday);\n=> true\n\nis.weekday(sunday);\n=> false\n\nis.not.weekday(sunday);\n=> true\n\nis.all.weekday(monday, saturday);\n=> false\n\nis.any.weekday(sunday, saturday, monday);\n=> true\n\n// 'all' and 'any' interfaces can also take array parameter\nis.all.weekday([sunday, saturday, monday]);\n=> false\n```\n\nis.inDateRange(value:date, start:date, end:date)\n----------------------------------------------------\n####Checks if date is within given range.\ninterface: not\n\n```javascript\nvar saturday = new Date('01/24/2015');\nvar sunday = new Date('01/25/2015');\nvar monday = new Date('01/26/2015');\nis.inDateRange(sunday, saturday, monday);\n=> true\n\nis.inDateRange(saturday, sunday, monday);\n=> false\n\nis.not.inDateRange(saturday, sunday, monday);\n=> true\n```\n\nis.inLastWeek(value:date)\n---------------------------\n####Checks if the given date is between now and 7 days ago.\ninterface: not\n\n```javascript\nvar twoDaysAgo = new Date(new Date().setDate(new Date().getDate() - 2));\nvar nineDaysAgo = new Date(new Date().setDate(new Date().getDate() - 9));\nis.inLastWeek(twoDaysAgo);\n=> true\n\nis.inLastWeek(nineDaysAgo);\n=> false\n\nis.not.inLastWeek(nineDaysAgo);\n=> true\n```\n\nis.inLastMonth(value:date)\n----------------------------\n####Checks if the given date is between now and a month ago.\ninterface: not\n\n```javascript\nvar tenDaysAgo = new Date(new Date().setDate(new Date().getDate() - 10));\nvar fortyDaysAgo = new Date(new Date().setDate(new Date().getDate() - 40));\nis.inLastMonth(tenDaysAgo);\n=> true\n\nis.inLastMonth(fortyDaysAgo);\n=> false\n\nis.not.inLastMonth(fortyDaysAgo);\n=> true\n```\n\nis.inLastYear(value:date)\n---------------------------\n####Checks if the given date is between now and a year ago.\ninterface: not\n\n```javascript\nvar twoMonthsAgo = new Date(new Date().setMonth(new Date().getMonth() - 2));\nvar thirteenMonthsAgo = new Date(new Date().setMonth(new Date().getMonth() - 13));\nis.inLastYear(twoMonthsAgo);\n=> true\n\nis.inLastYear(thirteenMonthsAgo);\n=> false\n\nis.not.inLastYear(thirteenMonthsAgo);\n=> true\n```\n\nis.inNextWeek(value:date)\n---------------------------\n####Checks if the given date is between now and 7 days later.\ninterface: not\n\n```javascript\nvar twoDaysLater = new Date(new Date().setDate(new Date().getDate() + 2));\nvar nineDaysLater = new Date(new Date().setDate(new Date().getDate() + 9));\nis.inNextWeek(twoDaysLater);\n=> true\n\nis.inNextWeek(nineDaysLater);\n=> false\n\nis.not.inNextWeek(nineDaysLater);\n=> true\n```\n\nis.inNextMonth(value:date)\n----------------------------\n####Checks if the given date is between now and a month later.\ninterface: not\n\n```javascript\nvar tenDaysLater = new Date(new Date().setDate(new Date().getDate() + 10));\nvar fortyDaysLater = new Date(new Date().setDate(new Date().getDate() + 40));\nis.inNextMonth(tenDaysLater);\n=> true\n\nis.inNextMonth(fortyDaysLater);\n=> false\n\nis.not.inNextMonth(fortyDaysLater);\n=> true\n```\n\nis.inNextYear(value:date)\n---------------------------\n####Checks if the given date is between now and a year later.\ninterface: not\n\n```javascript\nvar twoMonthsLater = new Date(new Date().setMonth(new Date().getMonth() + 2));\nvar thirteenMonthsLater = new Date(new Date().setMonth(new Date().getMonth() + 13));\nis.inNextYear(twoMonthsLater);\n=> true\n\nis.inNextYear(thirteenMonthsLater);\n=> false\n\nis.not.inNextYear(thirteenMonthsLater);\n=> true\n```\n\nis.quarterOfYear(value:date, quarter:number)\n---------------------------------------------\n####Checks if the given date is in the parameter quarter.\ninterface: not\n\n```javascript\nvar firstQuarter = new Date('01/26/2015');\nvar secondQuarter = new Date('05/26/2015');\nis.quarterOfYear(firstQuarter, 1);\n=> true\n\nis.quarterOfYear(secondQuarter, 1);\n=> false\n\nis.not.quarterOfYear(secondQuarter, 1);\n=> true\n```\n\nis.dayLightSavingTime(value:date)\n--------------------------------------------------\n####Checks if the given date is in daylight saving time.\ninterface: not\n\n```javascript\n// For Turkey Time Zone\nvar january1 = new Date('01/01/2015');\nvar june1 = new Date('06/01/2015');\n\nis.dayLightSavingTime(june1);\n=> true\n\nis.dayLightSavingTime(january1);\n=> false\n\nis.not.dayLightSavingTime(january1);\n=> true\n```\n\nConfiguration methods\n=====================\n\nis.setNamespace()\n-----------------\nChange namespace of library to prevent name collisions.\n\n```javascript\nvar customName = is.setNamespace();\ncustomName.odd(3);\n=> true\n```\n\nis.setRegexp(value:regexp, name:string)\n----------------------------------------\nOverride RegExps if you think they suck.\n\n```javascript\nis.url('https://www.duckduckgo.com');\n=> true\n\nis.setRegexp(/quack/, 'url');\nis.url('quack');\n=> true\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/arasatasaygin/is.js.git"
  },
  "scripts": {
    "build": "npm run lint && npm run min",
    "lint": "eslint .",
    "min": "uglifyjs is.js -m --comments \"/^!/\" -o is.min.js",
    "test": "mocha --check-leaks -R dot",
    "test:phantom": "mocha-phantomjs -R dot test/index.html"
  },
  "version": "0.9.0"
}
