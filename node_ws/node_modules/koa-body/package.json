{
  "_args": [
    [
      {
        "raw": "koa-body@2.5.0",
        "scope": null,
        "escapedName": "koa-body",
        "name": "koa-body",
        "rawSpec": "2.5.0",
        "spec": "2.5.0",
        "type": "version"
      },
      "D:\\www\\1A_TestDemo_code\\node_ws"
    ]
  ],
  "_cnpm_publish_time": 1506966408520,
  "_from": "koa-body@2.5.0",
  "_hasShrinkwrap": false,
  "_id": "koa-body@2.5.0",
  "_location": "/koa-body",
  "_nodeVersion": "6.11.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/koa-body-2.5.0.tgz_1506966408132_0.4982883215416223"
  },
  "_npmUser": {
    "name": "dlau",
    "email": "dlau00@gmail.com"
  },
  "_npmVersion": "3.9.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "koa-body@2.5.0",
    "scope": null,
    "escapedName": "koa-body",
    "name": "koa-body",
    "rawSpec": "2.5.0",
    "spec": "2.5.0",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "http://registry.npm.taobao.org/koa-body/download/koa-body-2.5.0.tgz",
  "_shasum": "84e8fcd8d5229a8cc1cb98a926e939069e716915",
  "_shrinkwrap": null,
  "_spec": "koa-body@2.5.0",
  "_where": "D:\\www\\1A_TestDemo_code\\node_ws",
  "author": {
    "name": "Daryl Lau",
    "email": "dlau00@gmail.com",
    "url": "https://github.com/dlau"
  },
  "bugs": {
    "url": "https://github.com/dlau/koa-body/issues"
  },
  "contributors": [
    {
      "name": "Daryl Lau",
      "email": "dlau00@gmail.com",
      "url": "https://github.com/dlau"
    },
    {
      "name": "Charlike Mike Reagent",
      "email": "mameto_100@mail.bg",
      "url": "https://github.com/tunnckoCore"
    }
  ],
  "dependencies": {
    "co-body": "^5.1.1",
    "formidable": "^1.1.1"
  },
  "description": "A koa body parser middleware. Support multipart, urlencoded and json request bodies.",
  "devDependencies": {
    "@types/koa": "^2.0.39",
    "koa": "^2.0.0",
    "koa-router": "^7.0.1",
    "lodash": "^3.3.1",
    "mocha": "*",
    "multiline": "*",
    "should": "*",
    "supertest": "2.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "84e8fcd8d5229a8cc1cb98a926e939069e716915",
    "size": 5199,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/koa-body/download/koa-body-2.5.0.tgz"
  },
  "files": [
    "LICENSE",
    "README.md",
    "index.js",
    "index.d.ts",
    "package.json"
  ],
  "gitHead": "79750e865e25ea1cf21964efbad90af504bdf314",
  "homepage": "https://github.com/dlau/koa-body#readme",
  "keywords": [
    "koa",
    "urlencoded",
    "multipart",
    "json",
    "body",
    "parser",
    "form"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "dlau",
      "email": "dlau@ya.ru"
    }
  ],
  "name": "koa-body",
  "optionalDependencies": {},
  "publish_time": 1506966408520,
  "readme": "koa-body [![Build Status](https://travis-ci.org/dlau/koa-body.svg?branch=koa2)](https://travis-ci.org/dlau/koa-body) [![Dependencies Status](https://david-dm.org/dlau/koa-body/status.svg)](https://david-dm.org/dlau/koa-body)\n================\n\n> A full-featured [`koa`](https://github.com/koajs/koa) body parser middleware. Support `multipart`, `urlencoded` and `json` request bodies. Provides same functionality as Express's bodyParser - [`multer`](https://github.com/expressjs/multer). And all that is wrapped only around\n[`co-body`](https://github.com/visionmedia/co-body) and [`formidable`](https://github.com/felixge/node-formidable).\n\n## Install\n>Install with [npm](https://github.com/npm/npm)\n\n```\n$ npm install koa-body\n```\n\n## Legacy Koa1 support\n```\n$ npm install koa-body@1\n```\n\n## Features\n- can handle three type requests\n  * **multipart/form-data**\n  * **application/x-www-urlencoded**\n  * **application/json**\n- option for patch to Koa or Node, or either\n- file uploads\n- body, fields and files limiting\n\n## Hello world\n```sh\nnpm install koa\nnpm install koa-body\nnvm install v7.9.0 #Note - koa requires node v7.6.0 for ES2015/async support\n```\nindex.js:\n```js\nconst Koa = require('koa');\nconst koaBody = require('koa-body');\n\nconst app = new Koa();\n\napp.use(koaBody());\napp.use(ctx => {\n  ctx.body = `Request Body: ${JSON.stringify(ctx.request.body)}`;\n});\n\napp.listen(3000);\n```\n\n```sh\n$ node index.js\n$ curl -i http://localhost:3000/users -d \"name=test\"\nHTTP/1.1 200 OK\nContent-Type: text/plain; charset=utf-8\nContent-Length: 29\nDate: Wed, 03 May 2017 02:09:44 GMT\nConnection: keep-alive\n\nRequest Body: {\"name\":\"test\"}% \n```\n\n**For a more comprehensive example, see** `examples/multipart.js`\n\n## Usage with [koa-router](https://github.com/alexmingoia/koa-router)\n> It's generally better to only parse the body as needed, if using a router that supports middleware composition, we can inject it only for certain routes.\n\n```js\nconst Koa = require('koa');\nconst app = new Koa();\nconst router = require('koa-router')();\nconst koaBody = require('koa-body');\n\nrouter.post('/users', koaBody(),\n  (ctx) => {\n    console.log(ctx.request.body);\n    // => POST body\n    ctx.body = JSON.stringify(ctx.request.body);\n  }\n);\n\napp.use(router.routes());\n\napp.listen(3000);\nconsole.log('curl -i http://localhost:3000/users -d \"name=test\"');\n```\n\n\n## Options\n> Options available for `koa-body`. Four custom options, and others are from `raw-body` and `formidable`.\n\n- `patchNode` **{Boolean}** Patch request body to Node's `ctx.req`, default `false`\n- `patchKoa` **{Boolean}** Patch request body to Koa's `ctx.request`, default `true`\n- `jsonLimit` **{String|Integer}** The byte (if integer) limit of the JSON body, default `1mb`\n- `formLimit` **{String|Integer}** The byte (if integer) limit of the form body, default `56kb`\n- `textLimit` **{String|Integer}** The byte (if integer) limit of the text body, default `56kb`\n- `encoding` **{String}** Sets encoding for incoming form fields, default `utf-8`\n- `multipart` **{Boolean}** Parse multipart bodies, default `false`\n- `urlencoded` **{Boolean}** Parse urlencoded bodies, default `true`\n- `text` **{Boolean}** Parse text bodies, default `true`\n- `json` **{Boolean}** Parse json bodies, default `true`\n- `formidable` **{Object}** Options to pass to the formidable multipart parser\n- `onError` **{Function}** Custom error handle, if throw an error, you can customize the response - onError(error, context), default will throw\n- `strict` **{Boolean}** If enabled, don't parse GET, HEAD, DELETE requests, default `true`\n\n## A note about strict mode\n> see [http://tools.ietf.org/html/draft-ietf-httpbis-p2-semantics-19#section-6.3](http://tools.ietf.org/html/draft-ietf-httpbis-p2-semantics-19#section-6.3)\n- GET, HEAD, and DELETE requests have no defined semantics for the request body, but this doesn't mean they may not be valid in certain use cases.\n- koa-body is strict by default\n\n## Some options for formidable\n> See [node-formidable](https://github.com/felixge/node-formidable) for a full list of options\n- `bytesExpected` **{Integer}** The expected number of bytes in this form, default `null`\n- `maxFields` **{Integer}** Limits the number of fields that the querystring parser will decode, default `1000`\n- `maxFieldsSize` **{Integer}** Limits the amount of memory all fields together (except files) can allocate in bytes. If this value is exceeded, an 'error' event is emitted, default `2mb (2 * 1024 * 1024)`\n- `uploadDir` **{String}** Sets the directory for placing file uploads in, default `os.tmpDir()`\n- `keepExtensions` **{Boolean}** Files written to `uploadDir` will include the extensions of the original files, default `false`\n- `hash` **{String}** If you want checksums calculated for incoming files, set this to either `'sha1'` or `'md5'`, default `false`\n- `multiples` **{Boolean}** Multiple file uploads or no, default `true`\n- `onFileBegin` **{Function}** Special callback on file begin. The function is executed directly by formidable. It can be used to rename files before saving them to disk. [See the docs](https://github.com/felixge/node-formidable#filebegin)\n\n\n**Note**: You can patch request body to Node or Koa in same time if you want.\n\n\n## Tests\n```\n$ npm test\n```\n\n## License\nThe MIT License, 2014 [Charlike Mike Reagent](https://github.com/tunnckoCore) ([@tunnckoCore](https://twitter.com/tunnckoCore)) and [Daryl Lau](https://github.com/dlau) ([@daryllau](https://twitter.com/daryllau))\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/dlau/koa-body.git"
  },
  "scripts": {
    "examples-koa-router": "node --harmony examples/koa-router.js",
    "examples-multer": "node --harmony examples/multer.js",
    "test": "mocha"
  },
  "types": "./index.d.ts",
  "version": "2.5.0"
}
